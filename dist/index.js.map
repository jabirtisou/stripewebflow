{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "declare const STRIPE_KEY: string;\n\nconst init = async () => {\n    let isIdealPayment = true;\n    let isCardPayment = false;\n\n    const stripe = window.Stripe?.(STRIPE_KEY);\n    if (!stripe) return;\n\n    const form = document.querySelector<HTMLFormElement>('[data-element=\"payment_form\"]');\n    if (!form) return;\n\n    const ccStripeElement = document.querySelector<HTMLElement>('[data-element=\"cc_stripe\"]');\n    if (!ccStripeElement) return;\n\n    const idealStripeElement = document.querySelector<HTMLElement>('[data-element=\"ideal_stripe\"]');\n    if (!idealStripeElement) return;\n\n    const elements = stripe.elements();\n\n    const idealBank = elements.create('idealBank', {});\n    idealBank.mount(idealStripeElement);\n\n    const card = elements.create('card');\n    card.mount(ccStripeElement);\n\n    // Get all tab elements\n    var tabs = document.querySelectorAll('.w-tab-link');\n\n    // Add click event listeners to each tab\n    tabs.forEach(function(tab) {\n    tab.addEventListener('click', function(event) {\n        // Prevent the default link behavior\n        event.preventDefault();\n\n      // Get the data-element attribute value\n        var dataElement = tab.getAttribute('data-element');\n\n        // Check if the clicked tab has a specific data-element value\n        if (dataElement === 'ideal_button') {\n            isIdealPayment = true;\n            isCardPayment = false;\n        } else if (dataElement === 'card_button') {\n            isCardPayment = true;\n            isIdealPayment = false;\n        }\n      });\n    });\n\n\n    form.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        const amountStripeElement = document.querySelector<HTMLInputElement>('[data-element=\"price_amount\"]');\n        let amountNumber = parseFloat(String(amountStripeElement?.value)) ?? 0;\n        \n        if (!amountStripeElement || isNaN(amountNumber)) {\n            return;\n        }\n\n        // amountNumber * 100 because stripe does the input price / 100\n        let correctStripeAmount = amountNumber * 100;\n        const payment_intent = await createPaymentIntent(correctStripeAmount);\n        if (!payment_intent) return;\n\n        await elements.submit()\n\n        if(isIdealPayment){\n            const resultIdealPayment = await stripe.confirmIdealPayment(payment_intent.clientSecret ,{\n                payment_method: {\n                    ideal: idealBank\n                },\n                return_url: 'https://stripe-donate.webflow.io/thank-you',\n                // receipt_email: 'email of customer'\n            })\n        } else if(isCardPayment){\n            const resultCardPayment = await stripe.confirmCardPayment(payment_intent.clientSecret, {\n            payment_method: {\n                    card: card\n                },\n                return_url: 'https://stripe-donate.webflow.io/thank-you',\n                // receipt_email: 'email of customer'\n            })\n            if(resultCardPayment.error) window.location.replace(`https://stripe-donate.webflow.io/thank-you?redirect_status=${resultCardPayment.error?.message}`);\n            else window.location.replace(`https://stripe-donate.webflow.io/thank-you?redirect_status=${resultCardPayment.paymentIntent.status}`);\n        }\n    })\n};\n\nconst createPaymentIntent = async (amount: number) => {\n    try {\n        const response = await fetch('https://cloudflare-work.jabirtisou8072.workers.dev/create-payment', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                amount: amount,\n                currency: 'eur'\n            })\n        });\n        const data: { paymentIntent_id:string; clientSecret: string } = await response.json();\n\n        return data;\n    }catch(err) {\n        return null;\n    }\n}\n\ninit();"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACE7F,MAAM,OAAO,YAAY;AACrB,QAAI,iBAAiB;AACrB,QAAI,gBAAgB;AAEpB,UAAM,SAAS,OAAO,SAAS,6GAAU;AACzC,QAAI,CAAC;AAAQ;AAEb,UAAM,OAAO,SAAS,cAA+B,+BAA+B;AACpF,QAAI,CAAC;AAAM;AAEX,UAAM,kBAAkB,SAAS,cAA2B,4BAA4B;AACxF,QAAI,CAAC;AAAiB;AAEtB,UAAM,qBAAqB,SAAS,cAA2B,+BAA+B;AAC9F,QAAI,CAAC;AAAoB;AAEzB,UAAM,WAAW,OAAO,SAAS;AAEjC,UAAM,YAAY,SAAS,OAAO,aAAa,CAAC,CAAC;AACjD,cAAU,MAAM,kBAAkB;AAElC,UAAM,OAAO,SAAS,OAAO,MAAM;AACnC,SAAK,MAAM,eAAe;AAG1B,QAAI,OAAO,SAAS,iBAAiB,aAAa;AAGlD,SAAK,QAAQ,SAAS,KAAK;AAC3B,UAAI,iBAAiB,SAAS,SAAS,OAAO;AAE1C,cAAM,eAAe;AAGrB,YAAI,cAAc,IAAI,aAAa,cAAc;AAGjD,YAAI,gBAAgB,gBAAgB;AAChC,2BAAiB;AACjB,0BAAgB;AAAA,QACpB,WAAW,gBAAgB,eAAe;AACtC,0BAAgB;AAChB,2BAAiB;AAAA,QACrB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAGD,SAAK,iBAAiB,UAAU,OAAO,MAAM;AACzC,QAAE,eAAe;AACjB,QAAE,gBAAgB;AAElB,YAAM,sBAAsB,SAAS,cAAgC,+BAA+B;AACpG,UAAI,eAAe,WAAW,OAAO,qBAAqB,KAAK,CAAC,KAAK;AAErE,UAAI,CAAC,uBAAuB,MAAM,YAAY,GAAG;AAC7C;AAAA,MACJ;AAGA,UAAI,sBAAsB,eAAe;AACzC,YAAM,iBAAiB,MAAM,oBAAoB,mBAAmB;AACpE,UAAI,CAAC;AAAgB;AAErB,YAAM,SAAS,OAAO;AAEtB,UAAG,gBAAe;AACd,cAAM,qBAAqB,MAAM,OAAO,oBAAoB,eAAe,cAAc;AAAA,UACrF,gBAAgB;AAAA,YACZ,OAAO;AAAA,UACX;AAAA,UACA,YAAY;AAAA;AAAA,QAEhB,CAAC;AAAA,MACL,WAAU,eAAc;AACpB,cAAM,oBAAoB,MAAM,OAAO,mBAAmB,eAAe,cAAc;AAAA,UACvF,gBAAgB;AAAA,YACR;AAAA,UACJ;AAAA,UACA,YAAY;AAAA;AAAA,QAEhB,CAAC;AACD,YAAG,kBAAkB;AAAO,iBAAO,SAAS,QAAQ,8DAA8D,kBAAkB,OAAO,OAAO,EAAE;AAAA;AAC/I,iBAAO,SAAS,QAAQ,8DAA8D,kBAAkB,cAAc,MAAM,EAAE;AAAA,MACvI;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,MAAM,sBAAsB,OAAO,WAAmB;AAClD,QAAI;AACA,YAAM,WAAW,MAAM,MAAM,qEAAqE;AAAA,QAC9F,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,QACpB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACjB;AAAA,UACA,UAAU;AAAA,QACd,CAAC;AAAA,MACL,CAAC;AACD,YAAM,OAA0D,MAAM,SAAS,KAAK;AAEpF,aAAO;AAAA,IACX,SAAO,KAAK;AACR,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,OAAK;",
  "names": []
}
